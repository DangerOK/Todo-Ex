{"version":3,"sources":["header/Header.js","main/Main.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Main","state","item","todos","onChange","e","_this","setState","target","value","onSubmit","preventDefault","concat","handleRemove","updatedTodos","filter","val","i","componentDidUpdate","localStorage","setItem","_this2","this","id","type","map","index","key","class","onClick","React","Component","App","className","src_header_Header","src_main_Main","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mQASeA,eANA,kBACbC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,qCCqDWC,oNAtDbC,MAAQ,CACNC,KAAM,GACNC,MAAO,MAGTC,SAAW,SAACC,GACVC,EAAKC,SAAS,CACZL,KAAMG,EAAEG,OAAOC,WAInBC,SAAW,SAACL,GACVA,EAAEM,iBACFL,EAAKC,SAAS,CAACJ,MAAOG,EAAKL,MAAME,MAAMS,OAAON,EAAKL,MAAMC,QACzDI,EAAKC,SAAS,CAACL,KAAM,SAGvBW,aAAe,SAACX,GACd,IAAIY,EAAeR,EAAKL,MAAME,MAAMY,OAAO,SAACC,EAAKC,GAC/C,OAAQf,IAASc,IAEnBV,EAAKC,SAAS,CACZJ,MAAOW,OAIXI,mBAAqB,WACnBC,aAAaC,QAAQ,QAASd,EAAKL,MAAME,gFAOlC,IAAAkB,EAAAC,KACP,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,GAAG,QACN1B,EAAAC,EAAAC,cAAA,OAAKwB,GAAG,YACN1B,EAAAC,EAAAC,cAAA,QAAMW,SAAUY,KAAKZ,UACnBb,EAAAC,EAAAC,cAAA,SAAOyB,KAAK,OAAOf,MAAOa,KAAKrB,MAAMC,KAAME,SAAUkB,KAAKlB,WAC1DP,EAAAC,EAAAC,cAAA,SAAOyB,KAAK,SAASf,MAAM,eAG/BZ,EAAAC,EAAAC,cAAA,OAAKwB,GAAG,aACR1B,EAAAC,EAAAC,cAAA,UACGuB,KAAKrB,MAAME,MAAMsB,IAAI,SAACvB,EAAMwB,GAAP,OAAiB7B,EAAAC,EAAAC,cAAA,MAAI4B,IAAKD,GAAQxB,EAAKL,EAAAC,EAAAC,cAAA,QAAM6B,MAAM,QAAQC,QAAS,kBAAMR,EAAKR,aAAaX,KAArD,kBA9CpD4B,IAAMC,YCaVC,mLATX,OACEnC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACbpC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,cALUJ,aCKZK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjD,QACf2C,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,WAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA/B,OAAMoD,WAAN,sBAEP5B,GAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBkC","file":"static/js/main.834dc0f5.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = () => (\n  <header>\n    <h1>The To-Do Experiment</h1>\n  </header>\n)\n\nexport default Header;\n","import React from 'react';\nimport './Main.css';  \n\nclass Main extends React.Component {\n  state = {\n    item: '',\n    todos: []\n  }\n\n  onChange = (e) => {\n    this.setState({\n      item: e.target.value\n    });\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.setState({todos: this.state.todos.concat(this.state.item)});\n    this.setState({item: ' '});\n  }\n\n  handleRemove = (item) => {\n    let updatedTodos = this.state.todos.filter((val, i) => {\n      return (item !== val)\n    });\n    this.setState({\n      todos: updatedTodos\n    });\n  }\n\n  componentDidUpdate = () => {\n    localStorage.setItem('todos', this.state.todos);\n  }\n\n  // componentDidMount = () => {\n  //     this.setState({todos: localStorage.getItem('todos')})\n  // }\n\n  render() {\n    return (\n      <div id='todo'>\n        <div id='add-todo'>\n          <form onSubmit={this.onSubmit}>\n            <input type='text' value={this.state.item} onChange={this.onChange} />\n            <input type='submit' value='Add Todo' />\n          </form>\n        </div>\n        <div id='todo-list'>\n        <ul>\n          {this.state.todos.map((item, index) => <li key={index}>{item}<span class='close' onClick={() => this.handleRemove(item)}>x</span></li>)}\n        </ul>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './header/Header';\nimport Main from './main/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}